{"version":3,"sources":["components/TodoItem/TodoItem.module.scss","components/TodoList/TodoList.module.scss","components/TodoInput/TodoInput.module.scss","redux/selectors.js","redux/actions.js","redux/constants.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App/App.js","redux/reducers/todo.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","todoListSelector","state","todo","todoList","todoListLengthSelector","length","editModeSelector","editMode","idTodoItemSelector","createSelector","id","find","item","confirmDeleteModSelector","confirmDeleteId","lastDeletedSelector","lastDeleted","setEditMode","type","payload","connect","task","addTodo","text","dispatch","uuidv4","checked","edit","useState","input","setInput","handleClick","className","styles","todoInput","onBlur","handleBlur","autoFocus","value","onChange","e","target","onKeyDown","key","handleKeyDown","onClick","confirmId","deleteTodo","a","setTimeout","err","console","error","setChecked","confirmDelete","index","todoItem","todoText","onDoubleClick","confirmButton","Button","variant","numTodo","loadTodosFromLocalStorage","localStorageData","JSON","parse","localStorage","getItem","addTodosInLocalStorage","setItem","stringify","revertDeleted","getState","useEffect","root","map","empty","cn","revert","view","App","props","errorInfo","this","setState","message","React","Component","initialState","combineReducers","action","filter","enhancer","applyMiddleware","thunk","createStore","reducers","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7b3e451.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItem_todoItem__1hpbC\",\"todoText\":\"TodoItem_todoText__3vmjo\",\"edit\":\"TodoItem_edit__1le0P\",\"checked\":\"TodoItem_checked__3oddJ\",\"confirmButton\":\"TodoItem_confirmButton__3ovhF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TodoList_root__29eoQ\",\"empty\":\"TodoList_empty__ug84N\",\"revert\":\"TodoList_revert__3c9En\",\"view\":\"TodoList_view__3mFKJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"TodoInput_todoInput__1a6jQ\",\"input\":\"TodoInput_input__QOK2C\"};","import {createSelector} from 'reselect';\n\nexport const todoListSelector = (state) => state.todo.todoList || [];\nexport const todoListLengthSelector = (state) => state.todo.todoList.length;\nexport const editModeSelector = (state) => state.todo.editMode;\n\nexport const idTodoItemSelector = createSelector(\n    todoListSelector,\n    editModeSelector,\n    (todoList, id) => {\n        return todoList?.find(item => item.id === id)\n    }\n);\n\nexport const confirmDeleteModSelector = (state) => state.todo.confirmDeleteId;\nexport const lastDeletedSelector = (state) => state.todo.lastDeleted;\n","import {\n    ADD_TODO,\n    CONFIRM_DELETE,\n    DELETE_TODO,\n    EDIT_MODE,\n    EDIT_TODO, CLEAR_LAST_DELETED,\n    LOAD_TODOS_FROM_LOCALSTORAGE,\n    SET_CHECKED, REVERT_DELETED\n} from './constants';\nimport {v4 as uuidv4} from 'uuid';\nimport {lastDeletedSelector} from './selectors';\n\n// export const deleteTodo = (id) => ({\n//     type: DELETE_TODO,\n//     payload: {\n//         id\n//     }\n// });\nexport const deleteTodo = (id) => {\n    return async (dispatch) => {\n        try {\n            dispatch({type: DELETE_TODO, payload: {id}});\n            setTimeout(() => (\n                dispatch({type: CLEAR_LAST_DELETED})\n            ), 3000)\n        } catch (err) {\n            console.error(err);\n        }\n    };\n};\n\nexport const addTodo = (text, task) => {\n    return (dispatch) => {\n        if (task) {\n            return dispatch({type: EDIT_TODO, payload: {text, task}})\n        }\n        const uuid = uuidv4();\n        dispatch({type: ADD_TODO, payload: {id: uuid, text: text, checked: false}})\n    };\n};\n\nexport const setEditMode = (id) => ({\n    type: EDIT_MODE,\n    payload: {id}\n});\n\nexport const loadTodosFromLocalStorage = () => {\n    return (dispatch) => {\n        const localStorageData = JSON.parse(localStorage.getItem('todoList'));\n        dispatch({type: LOAD_TODOS_FROM_LOCALSTORAGE, payload: {localStorageData}})\n    };\n};\n\nexport const addTodosInLocalStorage = (todoList) => {\n    return () => {\n        localStorage.setItem('todoList', JSON.stringify(todoList))\n    };\n};\n\nexport const setChecked = (id) => ({\n    type: SET_CHECKED,\n    payload: {id}\n});\n\nexport const confirmDelete = (id) => ({\n    type: CONFIRM_DELETE,\n    payload: {id}\n});\n\nexport const revertDeleted = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const lastDeleted = lastDeletedSelector(state);\n        if (lastDeleted) {\n            dispatch({type: REVERT_DELETED})\n        }\n    };\n};\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const LOAD_TODOS_FROM_LOCALSTORAGE = 'LOAD_TODOS_FROM_LOCALSTORAGE';\nexport const SET_CHECKED = 'SET_CHECKED';\nexport const CONFIRM_DELETE = 'CONFIRM_DELETE';\nexport const CLEAR_LAST_DELETED = 'CLEAR_LAST_DELETED';\nexport const REVERT_DELETED = 'REVERT_DELETED';\n","import React, {useState} from 'react';\nimport styles from './TodoInput.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {addTodo, setEditMode} from '../../redux/actions';\nimport {idTodoItemSelector} from '../../redux/selectors';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst TodoInput = ({addTodo, task, setEditMode, edit}) => {\n    const [input, setInput] = useState(task?.text || '');\n\n    const handleClick = () => {\n        if (input.length === 0) {\n            return\n        }\n        addTodo(input, task);\n        setInput('');\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            handleClick()\n        } else if (e.key === 'Escape') {\n            setEditMode(null)\n        }\n    };\n\n    const handleBlur = () => {\n        if (task) {\n            return handleClick()\n        }\n        setEditMode(null)\n    };\n\n    return (\n        <div className={styles.todoInput}>\n            <input\n                onBlur={() => handleBlur()}\n                autoFocus={!!task}\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={(e) => handleKeyDown(e)}\n                className={styles.input}/>\n            <span\n                onClick={() => handleClick()}>\n                {edit ? <EditIcon/> : <PostAddIcon/>}\n            </span>\n        </div>\n    );\n};\n\nTodoInput.propTypes = {\n    addTodo: PropTypes.func.isRequired,\n    task: PropTypes.shape({\n        id: PropTypes.string,\n        text: PropTypes.string,\n    }),\n    setEditMode: PropTypes.func,\n    edit: PropTypes.bool,\n};\n\nexport default connect((state) => ({\n    task: idTodoItemSelector(state),\n}), {\n    addTodo,\n    setEditMode\n})(TodoInput);\n","import React from 'react';\nimport styles from './TodoItem.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {confirmDelete, deleteTodo, setChecked, setEditMode} from '../../redux/actions';\nimport CreateIcon from '@material-ui/icons/Create';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TodoInput from '../TodoInput';\nimport {confirmDeleteModSelector, editModeSelector} from '../../redux/selectors';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport Button from '@material-ui/core/Button';\n\nconst TodoItem = ({id, text, checked, index, deleteTodo, editMode, setEditMode, setChecked, confirmId, confirmDelete}) => {\n    return (\n        <>\n            {editMode === id && !checked ?\n                <TodoInput edit={true}/>\n                : <div className={styles.todoItem}>\n                    <span className={styles.todoText}\n                          onDoubleClick={() => setEditMode(id)}>\n                        {checked ?\n                            <CheckCircleOutlineIcon onClick={() => setChecked(id)}/>\n                            : <RadioButtonUncheckedIcon onClick={() => setChecked(id)}/>}\n                        <span className={checked ? styles.checked : ''}>{index + 1}) {text}</span>\n                    </span>\n                    <div className={styles.edit}>\n                        <CreateIcon\n                            onClick={() => setEditMode(id)}/>\n                        <CloseIcon\n                            onClick={() => confirmDelete(id)}/>\n                        {confirmId === id &&\n                        <div className={styles.confirmButton}\n                             // onClick={() => confirmDelete(null)}\n                        >\n                            <span>Want to delete this task?</span>\n                            <Button onClick={() => deleteTodo(id)}\n                                    variant=\"contained\">Yes</Button>\n                            <Button onClick={() => confirmDelete(null)}\n                                    variant=\"contained\">No</Button>\n                        </div>}\n                    </div>\n                </div>\n            }\n        </>\n    );\n};\n\nTodoItem.propTypes = {\n    id: PropTypes.string,\n    text: PropTypes.string,\n    index: PropTypes.number,\n    deleteTodo: PropTypes.func.isRequired,\n    editMode: PropTypes.string,\n    setEditMode: PropTypes.func,\n    setChecked: PropTypes.func,\n    confirmId: PropTypes.string,\n    confirmDelete: PropTypes.func,\n};\n\nexport default connect((state) => ({\n    editMode: editModeSelector(state),\n    confirmId: confirmDeleteModSelector(state),\n}), {\n    deleteTodo,\n    setEditMode,\n    setChecked,\n    confirmDelete,\n})(TodoItem);\n","import React, {useEffect} from 'react';\nimport styles from './TodoList.module.scss'\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem';\nimport TodoInput from '../TodoInput';\nimport {connect} from 'react-redux';\nimport {lastDeletedSelector, todoListLengthSelector, todoListSelector} from '../../redux/selectors';\nimport {addTodosInLocalStorage, loadTodosFromLocalStorage, revertDeleted} from '../../redux/actions';\nimport HistoryIcon from '@material-ui/icons/History';\nimport cn from 'classnames';\n\nconst TodoList = ({todoList, numTodo, loadTodosFromLocalStorage, addTodosInLocalStorage, lastDeleted, revertDeleted}) => {\n    useEffect(() => {\n        loadTodosFromLocalStorage()\n    }, []); //eslint-disable-line\n\n    useEffect(() => {\n        addTodosInLocalStorage(todoList);\n    }, [addTodosInLocalStorage, todoList]);\n\n    return (\n        <div className={styles.root}>\n            <div>You have {numTodo} Todos</div>\n            <div>\n                {numTodo === 0 || !todoList ?\n                    <span className={styles.empty}>Empty, add task</span>\n                    : todoList.map((item, index) => (\n                        <TodoItem\n                            key={item.id}\n                            id={item.id}\n                            text={item.text}\n                            checked={item.checked}\n                            index={index}/>\n                    ))}\n            </div>\n            <div>\n                <TodoInput/>\n            </div>\n            <span onClick={() => revertDeleted()}\n                  className={cn(styles.revert, {[styles.view]: lastDeleted})}>\n                revert back <HistoryIcon/>\n            </span>\n        </div>\n    );\n};\n\nTodoList.propTypes = {\n    todoList: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        text: PropTypes.string,\n    }).isRequired).isRequired,\n    numTodo: PropTypes.number,\n    loadTodosFromLocalStorage: PropTypes.func,\n    lastDeleted: PropTypes.object,\n    revertDeleted: PropTypes.func.isRequired,\n};\n\nexport default connect((state) => ({\n    todoList: todoListSelector(state),\n    numTodo: todoListLengthSelector(state),\n    lastDeleted: lastDeletedSelector(state),\n}), {\n    loadTodosFromLocalStorage,\n    addTodosInLocalStorage,\n    revertDeleted,\n})(TodoList);\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: error})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <h1>{this.state.error.message}</h1>;\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <TodoList/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import {\n    ADD_TODO, CLEAR_LAST_DELETED,\n    CONFIRM_DELETE,\n    DELETE_TODO,\n    EDIT_MODE,\n    EDIT_TODO,\n    LOAD_TODOS_FROM_LOCALSTORAGE, REVERT_DELETED,\n    SET_CHECKED\n} from '../constants';\n\nconst initialState = {\n    todoList: [],\n    editMode: null,\n    confirmDeleteId: null,\n    lastDeleted: null,\n};\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action;\n    switch (type) {\n        case ADD_TODO:\n            return {\n                ...state,\n                todoList: [...state.todoList, payload]\n            };\n        case DELETE_TODO:\n            return {\n                ...state,\n                todoList: state.todoList.filter(item => (item.id !== payload.id)),\n                lastDeleted: state.todoList.find(item => {\n                    if (item.id === payload.id) {\n                        return item\n                    }\n                    return null\n                }),\n                confirmDeleteId: null\n            };\n        case EDIT_MODE:\n            return {\n                ...state,\n                editMode: payload.id,\n            };\n        case EDIT_TODO:\n            return {\n                ...state,\n                todoList: state.todoList.map(item => {\n                    if (item.id === payload.task.id) {\n                        return {...item, text: payload.text}\n                    }\n                    return item\n                }),\n                editMode: null,\n            };\n        case LOAD_TODOS_FROM_LOCALSTORAGE: {\n            return {\n                ...state,\n                todoList: payload.localStorageData,\n            }\n        }\n        case SET_CHECKED:\n            return {\n                ...state,\n                todoList: state.todoList.map(item => {\n                    if (item.id === payload.id) {\n                        return {...item, checked: !item.checked}\n                    }\n                    return item\n                })\n            };\n        case CONFIRM_DELETE:\n            return {\n                ...state,\n                confirmDeleteId: payload.id\n            };\n        case CLEAR_LAST_DELETED:\n            return {\n                ...state,\n                lastDeleted: null\n            };\n        case REVERT_DELETED:\n            return {\n                ...state,\n                todoList: [...state.todoList, state.lastDeleted],\n                lastDeleted: null\n            };\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux';\nimport todo from './todo';\n\nexport default combineReducers({\n    todo,\n});\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from './reducers';\r\n\r\nconst enhancer = applyMiddleware(\r\n  thunk,\r\n);\r\n\r\nexport default createStore(reducers, composeWithDevTools(enhancer));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}