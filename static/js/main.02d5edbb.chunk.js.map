{"version":3,"sources":["components/TodoItem/TodoItem.module.scss","components/TodoList/TodoList.module.scss","components/TodoInput/TodoInput.module.scss","redux/actions.js","redux/constants.js","redux/selectors.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App/App.js","features/counter/counterSlice.js","redux/reducers/todo.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","setEditMode","id","type","payload","todoListSelector","state","todo","todoList","todoListLengthSelector","length","editModeSelector","editMode","todoListToArrSelector","createSelector","Object","values","idTodoItemSelector","find","item","connect","task","addTodo","text","dispatch","uuidv4","checked","edit","useState","input","setInput","handleClick","className","styles","todoInput","onBlur","handleBlur","autoFocus","value","onChange","e","target","onKeyDown","key","handleKeyDown","onClick","deleteTodo","setChecked","index","todoItem","todoText","onDoubleClick","numTodo","loadTodosFromLocalStorage","initialState","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","root","empty","map","App","counterSlice","createSlice","name","reducers","increment","decrement","incrementByAmount","action","actions","configureStore","reducer","counter","counterReducer","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02d5edbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItem_todoItem__1hpbC\",\"todoText\":\"TodoItem_todoText__3vmjo\",\"edit\":\"TodoItem_edit__1le0P\",\"checked\":\"TodoItem_checked__3oddJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TodoList_root__29eoQ\",\"empty\":\"TodoList_empty__ug84N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"TodoInput_todoInput__1a6jQ\",\"input\":\"TodoInput_input__QOK2C\"};","import {ADD_TODO, DELETE_TODO, EDIT_MODE, EDIT_TODO, LOAD_TODOS_FROM_LOCALSTORAGE, SET_CHECKED} from './constants';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const deleteTodo = (id) => ({\n    type: DELETE_TODO,\n    payload: {\n        id\n    }\n});\n\nexport const addTodo = (text, task) => {\n    return (dispatch) => {\n        if (task) {\n            return dispatch({type: EDIT_TODO, payload: {text, task}})\n        }\n        const uuid = uuidv4();\n        dispatch({type: ADD_TODO, payload: {id: uuid, text: text, checked: false}})\n    };\n};\n\nexport const setEditMode = (id) => ({\n    type: EDIT_MODE,\n    payload: {id}\n});\n\nexport const loadTodosFromLocalStorage = (todoList) => ({\n    type: LOAD_TODOS_FROM_LOCALSTORAGE,\n    payload: {todoList}\n});\n\nexport const setChecked = (id) => ({\n    type: SET_CHECKED,\n    payload: {id}\n});\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const LOAD_TODOS_FROM_LOCALSTORAGE = 'LOAD_TODOS_FROM_LOCALSTORAGE';\nexport const SET_CHECKED = 'SET_CHECKED';\n","import {createSelector} from 'reselect';\n\nexport const todoListSelector = (state) => state.todo.todoList;\nexport const todoListLengthSelector = (state) => state.todo.todoList.length;\nexport const editModeSelector = (state) => state.todo.editMode;\n\nexport const todoListToArrSelector = createSelector(\n    todoListSelector,\n    (todoList) => {\n        return Object.values(todoList);\n    }\n);\n\nexport const idTodoItemSelector = createSelector(\n    todoListSelector,\n    editModeSelector,\n    (todoList, id) => {\n        return todoList.find(item => item.id === id)\n    }\n);\n","import React, {useState} from 'react';\nimport styles from './TodoInput.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {addTodo, setEditMode} from '../../redux/actions';\nimport {idTodoItemSelector} from '../../redux/selectors';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst TodoInput = ({addTodo, task, setEditMode, edit}) => {\n    const [input, setInput] = useState(task?.text || '');\n\n    const handleClick = () => {\n        if (input.length === 0) {\n            return\n        }\n        addTodo(input, task);\n        setInput('');\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            handleClick()\n        } else if (e.key === 'Escape') {\n            setEditMode(null)\n        }\n    };\n\n    const handleBlur = () => {\n        if (task) {\n            return handleClick()\n        }\n        setEditMode(null)\n    };\n\n    return (\n        <div className={styles.todoInput}>\n            <input\n                onBlur={() => handleBlur()}\n                autoFocus={!!task}\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={(e) => handleKeyDown(e)}\n                className={styles.input}/>\n            <span\n                onClick={() => handleClick()}>\n                {edit ? <EditIcon/> : <PostAddIcon/>}\n            </span>\n        </div>\n    );\n};\n\nTodoInput.propTypes = {\n    addTodo: PropTypes.func.isRequired,\n    task: PropTypes.shape({\n        id: PropTypes.string,\n        text: PropTypes.string,\n    }),\n    setEditMode: PropTypes.func,\n    edit: PropTypes.bool,\n};\n\nexport default connect((state) => ({\n    task: idTodoItemSelector(state),\n}), {\n    addTodo,\n    setEditMode\n})(TodoInput);\n","import React from 'react';\nimport styles from './TodoItem.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {deleteTodo, setChecked, setEditMode} from '../../redux/actions';\nimport CreateIcon from '@material-ui/icons/Create';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TodoInput from '../TodoInput';\nimport {editModeSelector} from '../../redux/selectors';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\nconst TodoItem = ({id, text, checked, index, deleteTodo, editMode, setEditMode, setChecked}) => {\n    return (\n        <>\n            {editMode === id && !checked ?\n                <TodoInput edit={true}/>\n                : <div className={styles.todoItem}>\n                    <span className={styles.todoText}\n                          onDoubleClick={() => setEditMode(id)}>\n                        {checked ?\n                            <CheckCircleOutlineIcon onClick={() => setChecked(id)}/>\n                            : <RadioButtonUncheckedIcon onClick={() => setChecked(id)}/>}\n                        <span className={checked ? styles.checked : ''}>{index + 1}) {text}</span>\n                    </span>\n                    <div className={styles.edit}>\n                        <CreateIcon\n                            onClick={() => setEditMode(id)}/>\n                        <CloseIcon\n                            onClick={() => deleteTodo(id)}/>\n                    </div>\n                </div>\n            }\n        </>\n    );\n};\n\nTodoItem.propTypes = {\n    id: PropTypes.string,\n    text: PropTypes.string,\n    index: PropTypes.number,\n    deleteTodo: PropTypes.func.isRequired,\n    editMode: PropTypes.string,\n    setEditMode: PropTypes.func,\n    setChecked: PropTypes.func,\n};\n\nexport default connect((state) => ({\n    editMode: editModeSelector(state),\n}), {\n    deleteTodo,\n    setEditMode,\n    setChecked,\n})(TodoItem);\n","import React, {useEffect} from 'react';\nimport styles from './TodoList.module.scss'\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem';\nimport TodoInput from '../TodoInput';\nimport {connect} from 'react-redux';\nimport {todoListLengthSelector, todoListToArrSelector} from '../../redux/selectors';\nimport {loadTodosFromLocalStorage} from '../../redux/actions';\n\nconst TodoList = ({todoList, numTodo, loadTodosFromLocalStorage}) => {\n    const initialState = JSON.parse(localStorage.getItem('todoList'));\n    useEffect(() => {\n        if (initialState?.length > 0 || null)\n        loadTodosFromLocalStorage(initialState)\n    }, []); //eslint-disable-line\n\n    useEffect(() => {\n        localStorage.setItem('todoList', JSON.stringify(todoList))\n    }, [todoList]);\n\n    return (\n        <div className={styles.root}>\n            <div>You have {numTodo} Todos</div>\n            <div>\n                {numTodo === 0 ?\n                    <span className={styles.empty}>Empty, add task</span>\n                    : todoList.map((item, index) => (\n                        <TodoItem\n                            key={item.id}\n                            id={item.id}\n                            text={item.text}\n                            checked={item.checked}\n                            index={index}/>\n                    ))}\n            </div>\n            <div>\n                <TodoInput/>\n            </div>\n        </div>\n    );\n};\n\nTodoList.propTypes = {\n    todoList: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        text: PropTypes.string,\n    }).isRequired).isRequired,\n    numTodo: PropTypes.number,\n    loadTodosFromLocalStorage: PropTypes.func,\n};\n\nexport default connect((state) => ({\n    todoList: todoListToArrSelector(state),\n    numTodo: todoListLengthSelector(state),\n}), {\n    loadTodosFromLocalStorage\n})(TodoList);\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import {ADD_TODO, DELETE_TODO, EDIT_MODE, EDIT_TODO, LOAD_TODOS_FROM_LOCALSTORAGE, SET_CHECKED} from '../constants';\n\nconst initialState = {\n    todoList: [],\n    editMode: null,\n};\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action;\n    switch (type) {\n        case ADD_TODO:\n            return {\n                ...state,\n                todoList: [...state.todoList, payload]\n            };\n        case DELETE_TODO:\n            return {\n                ...state,\n                todoList: state.todoList.filter(item => (item.id !== payload.id))\n            };\n        case EDIT_MODE:\n            return {\n                ...state,\n                editMode: payload.id,\n            };\n        case EDIT_TODO:\n            return {\n                ...state,\n                todoList: state.todoList.map(item => {\n                    if (item.id === payload.task.id) {\n                        return {...item, text: payload.text}\n                    }\n                    return item\n                }),\n                editMode: null,\n            };\n        case LOAD_TODOS_FROM_LOCALSTORAGE: {\n            return {\n                ...state,\n                todoList: payload.todoList,\n            }\n        }\n        case SET_CHECKED:\n            return {\n                ...state,\n                todoList: state.todoList.map(item => {\n                    if (item.id === payload.id) {\n                        return {...item, checked: !item.checked}\n                    }\n                    return item\n                })\n            };\n        default:\n            return state\n    }\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport todo from './reducers/todo';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todo,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}