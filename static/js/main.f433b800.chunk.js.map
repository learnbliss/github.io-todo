{"version":3,"sources":["components/TodoList/TodoList.module.scss","components/TodoItem/TodoItem.module.scss","components/TodoInput/TodoInput.module.scss","redux/selectors.js","components/TodoInput/TodoInput.js","redux/actions.js","redux/constants.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App/App.js","features/counter/counterSlice.js","redux/reducers/todo.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","todoListSelector","state","todo","todoList","todoListLengthSelector","length","editModeSelector","editMode","todoListToArrSelector","createSelector","Object","values","idTodoItemSelector","id","find","item","connect","task","addTodo","text","index","dispatch","type","payload","uuidv4","useState","input","setInput","handleClick","className","styles","todoInput","value","onChange","e","target","onKeyDown","key","handleKeyDown","onClick","deleteTodo","setEditMode","todoItem","edit","numTodo","loadTodosFromLocalStorage","initialState","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","root","empty","map","App","counterSlice","createSlice","name","reducers","increment","decrement","incrementByAmount","action","actions","configureStore","reducer","counter","counterReducer","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f433b800.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TodoList_root__29eoQ\",\"empty\":\"TodoList_empty__ug84N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItem_todoItem__1hpbC\",\"edit\":\"TodoItem_edit__1le0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"TodoInput_todoInput__1a6jQ\",\"input\":\"TodoInput_input__QOK2C\"};","import {createSelector} from 'reselect';\n\nexport const todoListSelector = (state) => state.todo.todoList;\nexport const todoListLengthSelector = (state) => state.todo.todoList.length;\nexport const editModeSelector = (state) => state.todo.editMode;\n\nexport const todoListToArrSelector = createSelector(\n    todoListSelector,\n    (todoList) => {\n        return Object.values(todoList);\n    }\n);\n\nexport const idTodoItemSelector = createSelector(\n    todoListSelector,\n    editModeSelector,\n    (todoList, id) => {\n        return todoList.find(item => item.id === id)\n    }\n);\n","import React, {useState} from 'react';\nimport styles from './TodoInput.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {addTodo} from '../../redux/actions';\nimport {idTodoItemSelector} from '../../redux/selectors';\n\nconst TodoInput = ({addTodo, task, index}) => {\n    const [input, setInput] = useState(task?.text || '');\n\n    const handleClick = () => {\n        addTodo(input, task, index);\n        setInput('');\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            handleClick()\n        }\n    };\n\n    return (\n        <div className={styles.todoInput}>\n            <input\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={(e) => handleKeyDown(e)}\n                className={styles.input}/>\n            <button\n                onClick={() => handleClick()}>\n                {task ? 'edit' : 'add'}\n            </button>\n        </div>\n    );\n};\n\nTodoInput.propTypes = {\n    addTodo: PropTypes.func.isRequired,\n};\n\nexport default connect((state) => ({\n    task: idTodoItemSelector(state),\n}), {\n    addTodo\n})(TodoInput);\n","import {ADD_TODO, DELETE_TODO, EDIT_MODE, EDIT_TODO, LOAD_TODOS_FROM_LOCALSTORAGE} from './constants';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const deleteTodo = (id) => ({\n    type: DELETE_TODO,\n    payload: {\n        id\n    }\n});\n\nexport const addTodo = (text, task, index) => {\n    return (dispatch) => {\n        if (task) {\n            return dispatch({type: EDIT_TODO, payload: {text, task, index}})\n        }\n        const uuid = uuidv4();\n        dispatch({type: ADD_TODO, payload: {id: uuid, text: text}})\n    };\n};\n\nexport const setEditMode = (id) => ({\n    type: EDIT_MODE,\n    payload: {id}\n});\n\nexport const loadTodosFromLocalStorage = (todoList) => ({\n    type: LOAD_TODOS_FROM_LOCALSTORAGE,\n    payload: {todoList}\n});\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const LOAD_TODOS_FROM_LOCALSTORAGE = 'LOAD_TODOS_FROM_LOCALSTORAGE';\n","import React from 'react';\nimport styles from './TodoItem.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {deleteTodo, setEditMode} from '../../redux/actions';\nimport CreateIcon from '@material-ui/icons/Create';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TodoInput from '../TodoInput';\nimport {editModeSelector} from '../../redux/selectors';\n\nconst TodoItem = ({id, text, index, deleteTodo, editMode, setEditMode}) => {\n    return (\n        <>\n            {editMode === id ?\n                <TodoInput index={index}/>\n                : <div className={styles.todoItem}>\n                    <span>{index + 1}) {text}</span>\n                    <div className={styles.edit}>\n                        <CreateIcon\n                            onClick={() => setEditMode(id)}/>\n                        <CloseIcon\n                            onClick={() => deleteTodo(id)}/>\n                    </div>\n                </div>\n            }\n        </>\n    );\n};\n\nTodoItem.propTypes = {\n    id: PropTypes.string,\n    text: PropTypes.string,\n    index: PropTypes.number,\n    deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default connect((state) => ({\n    editMode: editModeSelector(state),\n}), {\n    deleteTodo,\n    setEditMode,\n})(TodoItem);\n","import React, {useEffect} from 'react';\nimport styles from './TodoList.module.scss'\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem';\nimport TodoInput from '../TodoInput';\nimport {connect} from 'react-redux';\nimport {todoListLengthSelector, todoListToArrSelector} from '../../redux/selectors';\nimport {loadTodosFromLocalStorage} from '../../redux/actions';\n\nconst TodoList = ({todoList, numTodo, loadTodosFromLocalStorage}) => {\n    const initialState = JSON.parse(localStorage.getItem('todoList'));\n    useEffect(() => {\n        if (initialState.length > 0)\n        loadTodosFromLocalStorage(initialState)\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('todoList', JSON.stringify(todoList))\n    }, [todoList]);\n\n    return (\n        <div className={styles.root}>\n            <div>You have {numTodo} Todos</div>\n            <div>\n                {numTodo === 0 ?\n                    <span className={styles.empty}>Empty, add task</span>\n                    : todoList.map((item, index) => (\n                        <TodoItem key={item.id} id={item.id} text={item.text} index={index}/>\n                    ))}\n            </div>\n            <div>\n                <TodoInput/>\n            </div>\n        </div>\n    );\n};\n\nTodoList.propTypes = {\n    todoList: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        text: PropTypes.string,\n    }).isRequired).isRequired,\n    numTodo: PropTypes.number,\n};\n\nexport default connect((state) => ({\n    todoList: todoListToArrSelector(state),\n    numTodo: todoListLengthSelector(state),\n}), {\n    loadTodosFromLocalStorage\n})(TodoList);\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import {ADD_TODO, DELETE_TODO, EDIT_MODE, EDIT_TODO, LOAD_TODOS_FROM_LOCALSTORAGE} from '../constants';\n\nconst initialState = {\n    todoList: [],\n    editMode: null,\n};\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action;\n    switch (type) {\n        case ADD_TODO:\n            return {\n                ...state,\n                todoList: [...state.todoList, payload]\n            };\n        case DELETE_TODO:\n            return {\n                ...state,\n                todoList: state.todoList.filter(item => (item.id !== payload.id))\n            };\n        case EDIT_MODE:\n            return {\n                ...state,\n                editMode: payload.id,\n            };\n        case EDIT_TODO:\n            return {\n                ...state,\n                todoList: state.todoList.map(item => {\n                    if (item.id === payload.task.id) {\n                        return {...item, text: payload.text}\n                    }\n                    return item\n                }),\n                editMode: null,\n            };\n        case LOAD_TODOS_FROM_LOCALSTORAGE: {\n            return {\n                ...state,\n                todoList: payload.todoList,\n            }\n        }\n        default:\n            return state\n    }\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport todo from './reducers/todo';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todo,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}