{"version":3,"sources":["components/TodoItem/TodoItem.module.scss","components/TodoInput/TodoInput.module.scss","components/Lists/Lists.module.scss","components/PopUp/PopUp.module.scss","components/TodoList/TodoList.module.scss","components/Header/Header.module.scss","components/ListsMenu/ListsMenu.module.scss","components/ConfirmAction/ConfirmAction.module.scss","components/ListHead/ListHead.module.scss","components/ButtonPrimary/ButtonPrimary.module.scss","components/SelectList/SelectList.module.scss","components/LayoutList/LayoutList.module.scss","components/FieldNewTask/FieldNewTask.module.scss","redux/actions.js","redux/selectors.js","redux/constants.js","redux/utils.js","components/Header/Header.js","components/ConfirmAction/ConfirmAction.js","components/ButtonPrimary/ButtonPrimary.js","components/ListHead/ListHead.js","components/TodoInput/TodoInput.js","components/SelectList/SelectList.js","components/Lists/Lists.js","components/ListsMenu/ListsMenu.js","components/TodoItem/TodoItem.js","components/LayoutList/LayoutList.js","components/PopUp/PopUp.js","components/FieldNewTask/FieldNewTask.js","components/TodoList/TodoList.js","components/App/App.js","redux/reducers/todo.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","timer","todoListSelector","state","todo","todoList","currentListSelector","currentList","todoListLengthSelector","createSelector","length","editModeSelector","editMode","idTodoItemSelector","id","find","item","confirmDeleteModSelector","confirmDeleteId","lastDeletedSelector","lastDeleted","confirmClearListSelector","confirmClearList","todoListToArrSelector","Object","keys","todoListNameSelector","newListNameSelector","newListName","listEditSelector","listEdit","deleteListSelector","deleteList","shouldBeOneListSelector","shouldBeOneList","CONFIRM","SUCCESS","deleteKeyInObj","key","obj","newObj","upperCase","text","replace","match","toUpperCase","renameKeyInObj","oldProp","newProp","old","others","addTodo","task","dispatch","upperText","type","payload","newTodo","uuidv4","checked","setEditMode","clearList","value","a","addNewListConfirm","listName","deleteCurrentListConfirm","getState","setTimeout","connect","numTodo","className","styles","header","ConfirmAction","positiveFn","negativeFn","positive","negative","head","escape","e","useEffect","document","addEventListener","removeEventListener","confirmButton","onClick","onKeyDown","Button","stopPropagation","variant","ButtonPrimary","buttonClick","name","style","disable","btn","disabled","list","TodoInput","fnApply","initialData","fnQuery","placeholder","maxLength","onBlur","useState","input","setInput","handleClick","todoInput","autoFocus","onChange","target","handleKeyDown","cn","handleBlur","onMouseDown","todoListArr","setCurrentList","listSelect","handleChangeList","map","i","addNewListSuccess","nameList","renameListConfirm","lists","buttons","titleAccess","deleteCurrentList","newList","forEach","index","confirmId","deleteTodo","clearTimeout","setChecked","confirmDelete","setEditNoChecked","root","todoItem","todoText","onDoubleClick","edit","todoListName","empty","PopUp","message","viewProp","func","icon","revert","view","gap","loadTodosFromLocalStorage","localStorage","getItem","reformatTodoList","localStorageTodoList","JSON","parse","localStorageCurrentList","Array","isArray","Default","addTodosInLocalStorage","setItem","stringify","revertDeleted","setShouldBeOne","App","props","error","errorInfo","this","setState","color","React","Component","initialState","combineReducers","action","filter","renameListName","enhancer","applyMiddleware","thunk","createStore","reducers","composeWithDevTools","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c114269.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TodoItem_root__9JzS9\",\"todoItem\":\"TodoItem_todoItem__1hpbC\",\"rootScale\":\"TodoItem_rootScale__2Eo52\",\"todoText\":\"TodoItem_todoText__3vmjo\",\"edit\":\"TodoItem_edit__1le0P\",\"checked\":\"TodoItem_checked__3oddJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"TodoInput_todoInput__1a6jQ\",\"rootScale\":\"TodoInput_rootScale__1iBlP\",\"input\":\"TodoInput_input__QOK2C\",\"editMode\":\"TodoInput_editMode__2zKbM\",\"edit\":\"TodoInput_edit__3-K0l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lists\":\"Lists_lists__1iZOR\",\"rootScale\":\"Lists_rootScale__3ao11\",\"buttons\":\"Lists_buttons___9vdu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"revert\":\"PopUp_revert__RA7fV\",\"view\":\"PopUp_view__NEYLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TodoList_root__29eoQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"ListsMenu_head__3taTr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"confirmButton\":\"ConfirmAction_confirmButton__2pJZ2\",\"confBack\":\"ConfirmAction_confBack__3UKHR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ListHead_list__280tu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ButtonPrimary_btn__8mzAZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listSelect\":\"SelectList_listSelect__GkX-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"empty\":\"LayoutList_empty__3diUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gap\":\"FieldNewTask_gap__xxF2U\"};","import {\n    ADD_TODO,\n    CONFIRM_DELETE,\n    DELETE_TODO,\n    EDIT_MODE,\n    EDIT_TODO,\n    CLEAR_LAST_DELETED,\n    LOAD_TODOS_FROM_LOCALSTORAGE,\n    SET_CHECKED,\n    REVERT_DELETED,\n    CLEAR_LIST,\n    CONFIRM,\n    SUCCESS,\n    SET_CURRENT_LIST,\n    ADD_NEW_LIST,\n    DELETE_CURRENT_LIST,\n    SHOULD_BE_ONE_LIST, RENAME_LIST\n} from './constants';\nimport {v4 as uuidv4} from 'uuid';\nimport {\n    currentListSelector,\n    lastDeletedSelector,\n    newListNameSelector,\n    todoListToArrSelector\n} from './selectors';\nimport {upperCase} from './utils';\n\nexport const confirmDelete = (id) => ({\n    type: CONFIRM_DELETE,\n    payload: {id}\n});\n\nlet timer;\nexport const deleteTodo = (id) => {\n    return (dispatch) => {\n        const handler = () => (dispatch({type: CLEAR_LAST_DELETED}));\n        dispatch({type: DELETE_TODO, payload: {id}});\n        clearTimeout(timer);\n        timer = setTimeout(handler, 3000)\n    };\n};\n\nexport const addTodo = (text, task) => {\n    return (dispatch) => {\n        const upperText = upperCase(text);\n        if (task) {\n            return dispatch({type: EDIT_TODO, payload: {upperText, task}})\n        }\n        const uuid = uuidv4();\n        const newTodo = {id: uuid, text: upperText, checked: false};\n        dispatch({type: ADD_TODO, payload: {newTodo}})\n    };\n};\n\nexport const setEditMode = (id) => ({\n    type: EDIT_MODE,\n    payload: {id}\n});\n\nexport const loadTodosFromLocalStorage = () => {\n    return (dispatch) => {\n        if (localStorage.getItem('todoList')) {\n            const localStorageTodoList = JSON.parse(localStorage.getItem('todoList'));\n            let localStorageCurrentList = JSON.parse(localStorage.getItem('currentList'));\n            let reformatTodoList;\n            if (Array.isArray(localStorageTodoList)) { // для совместимости с версией без поддержки списков\n                reformatTodoList = {Default: localStorageTodoList};\n                localStorageCurrentList = 'Default';\n            } else {\n                reformatTodoList = localStorageTodoList\n            }\n            dispatch({type: LOAD_TODOS_FROM_LOCALSTORAGE, payload: {reformatTodoList, localStorageCurrentList}})\n        }\n    };\n};\n\nexport const addTodosInLocalStorage = (todoList, currentList) => {\n    return () => {\n        localStorage.setItem('todoList', JSON.stringify(todoList));\n        localStorage.setItem('currentList', JSON.stringify(currentList));\n    };\n};\n\nexport const setChecked = (id) => ({\n    type: SET_CHECKED,\n    payload: {id}\n});\n\nexport const revertDeleted = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const lastDeleted = lastDeletedSelector(state);\n        if (lastDeleted) {\n            dispatch({type: REVERT_DELETED})\n        }\n    };\n};\n\nexport const clearList = (value) => {\n    return async (dispatch) => {\n        if (value !== 'confirm') {\n            dispatch({type: CLEAR_LIST + CONFIRM})\n        } else {\n            dispatch({type: CLEAR_LIST + SUCCESS})\n        }\n    };\n};\n\nexport const setCurrentList = (currentList) => ({\n    type: SET_CURRENT_LIST,\n    payload: {currentList}\n});\n\nexport const addNewListConfirm = (listName) => ({type: ADD_NEW_LIST + CONFIRM, payload: {listName}});\n\nexport const addNewListSuccess = (nameList) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const newListName = newListNameSelector(state);\n        const upperText = upperCase(nameList);\n        if (newListName) {\n            return dispatch({type: RENAME_LIST + SUCCESS, payload: {upperText}})\n        }\n        dispatch({type: ADD_NEW_LIST + SUCCESS, payload: {upperText}})\n    };\n};\n\nexport const renameListConfirm = (currentList) => {\n    return (dispatch) => {\n        dispatch({type: RENAME_LIST + CONFIRM, payload: {currentList}})\n    };\n};\n\nexport const deleteCurrentListConfirm = () => {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const todoListArr = todoListToArrSelector(state);\n        if (todoListArr.length === 1) {\n            dispatch({type: SHOULD_BE_ONE_LIST});\n            timer = setTimeout(() => (dispatch({type: SHOULD_BE_ONE_LIST})), 3000)\n        } else {\n            dispatch({type: DELETE_CURRENT_LIST + CONFIRM})\n        }\n    };\n};\n\n\nexport const deleteCurrentList = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const todoListArr = todoListToArrSelector(state);\n        const currentList = currentListSelector(state);\n        let newList;\n\n        todoListArr.forEach((list, index) => {\n            if (list === currentList) {\n                if (index === 0) {\n                    newList = todoListArr[index + 1]\n                } else {\n                    newList = todoListArr[index - 1]\n                }\n                dispatch({type: DELETE_CURRENT_LIST + SUCCESS, payload: {newList}})\n            }\n        })\n    };\n};\n\nexport const setShouldBeOne = () => {\n    return (dispatch) => {\n        clearTimeout(timer);\n        dispatch({type: SHOULD_BE_ONE_LIST})\n    };\n};\n","import {createSelector} from 'reselect';\n\nexport const todoListSelector = (state) => state.todo.todoList;\nexport const currentListSelector = (state) => state.todo.currentList;\n\nexport const todoListLengthSelector = createSelector(\n    currentListSelector,\n    todoListSelector,\n    (currentList, todoList) => {\n\n        return todoList[currentList]?.length\n    }\n);\n\nexport const editModeSelector = (state) => state.todo.editMode;\n\nexport const idTodoItemSelector = createSelector(\n    todoListSelector,\n    editModeSelector,\n    currentListSelector,\n    (todoList, id, currentList) => {\n        return todoList[currentList]?.find(item => item.id === id)\n    }\n);\n\nexport const confirmDeleteModSelector = (state) => state.todo.confirmDeleteId;\nexport const lastDeletedSelector = (state) => state.todo.lastDeleted;\nexport const confirmClearListSelector = (state) => state.todo.confirmClearList;\n\nexport const todoListToArrSelector = createSelector(\n    todoListSelector,\n    (todoList) => {\n        return Object.keys(todoList)\n    }\n);\n\nexport const todoListNameSelector = createSelector(\n    todoListSelector,\n    currentListSelector,\n    (todoList, currentList) => {\n        return todoList[currentList];\n    }\n);\n\nexport const newListNameSelector = (state) => state.todo.newListName;\nexport const listEditSelector = (state) => state.todo.listEdit;\nexport const deleteListSelector = (state) => state.todo.deleteList;\nexport const shouldBeOneListSelector = (state) => state.todo.shouldBeOneList;\n\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_MODE = 'EDIT_MODE';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const LOAD_TODOS_FROM_LOCALSTORAGE = 'LOAD_TODOS_FROM_LOCALSTORAGE';\nexport const SET_CHECKED = 'SET_CHECKED';\nexport const CONFIRM_DELETE = 'CONFIRM_DELETE';\nexport const CLEAR_LAST_DELETED = 'CLEAR_LAST_DELETED';\nexport const REVERT_DELETED = 'REVERT_DELETED';\nexport const CLEAR_LIST = 'CLEAR_LIST';\nexport const CONFIRM = '_CONFIRM';\nexport const SUCCESS = '_SUCCESS';\nexport const SET_CURRENT_LIST = 'SET_CURRENT_LIST';\nexport const ADD_NEW_LIST = 'ADD_NEW_LIST';\nexport const DELETE_CURRENT_LIST = 'DELETE_CURRENT_LIST';\nexport const SHOULD_BE_ONE_LIST = 'SHOULD_BE_ONE_LIST';\nexport const RENAME_LIST = 'RENAME_LIST';\n","export const deleteKeyInObj = (key, obj) => {\n    const newObj = {...obj};\n    delete newObj[key];\n    return newObj\n};\n\nexport const upperCase = (text) => {\n    return text.replace(/^([A-zА-яё])/, (match) => {\n        return match.toUpperCase()\n    })\n};\n\nexport const renameKeyInObj = (oldProp, newProp, {[oldProp]:old, ...others}) => ({\n    [newProp]: old,\n    ...others\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {currentListSelector, todoListLengthSelector} from '../../redux/selectors';\nimport styles from './Header.module.scss'\n\nconst Header = ({numTodo, currentList}) => {\n    return (\n        <div>\n            <span>You have <b>{numTodo}</b> Todos in <span className={styles.header}>\"{currentList}\"</span> list</span>\n        </div>\n    );\n};\n\nHeader.propTypes = {\n    numTodo: PropTypes.number,\n    currentList: PropTypes.string\n};\n\nexport default connect(state => ({\n    numTodo: todoListLengthSelector(state),\n    currentList: currentListSelector(state),\n}))(Header);\n","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ConfirmAction.module.scss'\nimport Button from '@material-ui/core/Button';\n\nconst ConfirmAction = ({positiveFn, negativeFn = positiveFn, positive = true, negative = false, head = 'Confirm delete?'}) => {\n    const escape = (e) => {\n        if (e.key === 'Escape') {\n            negativeFn(negative)\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('keydown', escape, false);\n        return () => {\n            document.removeEventListener('keydown', escape, false);\n        };\n    }, []); //eslint-disable-line\n    return (\n        <div className={styles.confirmButton}\n             onClick={() => negativeFn(negative)}>\n            <span onKeyDown={(e) => escape(e)}>{head}</span>\n            <Button onClick={(e) => {\n                e.stopPropagation();\n                positiveFn(positive)\n            }}\n                    variant=\"contained\">Yes</Button>\n            <Button onClick={(e) => {\n                e.stopPropagation();\n                negativeFn(negative)\n            }}\n                    variant=\"contained\">No</Button>\n        </div>\n    );\n};\n\nConfirmAction.propTypes = {\n    positiveFn: PropTypes.func.isRequired,\n    negativeFn: PropTypes.func,\n    positive: PropTypes.string || PropTypes.bool,\n    negative: PropTypes.bool,\n    head: PropTypes.string,\n};\n\nexport default ConfirmAction;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ButtonPrimary.module.scss'\n\nconst ButtonPrimary = ({buttonClick, name, style, disable = false,}) => {\n    return (\n        <button onClick={() => buttonClick()}\n                className={styles.btn}\n                style={style}\n                disabled={disable}>\n            {name}\n        </button>\n    );\n};\n\nButtonPrimary.propTypes = {\n    buttonClick: PropTypes.func,\n    name: PropTypes.string,\n    style: PropTypes.object,\n    disable: PropTypes.bool,\n};\n\nexport default ButtonPrimary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ListHead.module.scss'\nimport ButtonPrimary from '../ButtonPrimary';\nimport {connect} from 'react-redux';\nimport {addNewListConfirm, deleteCurrentListConfirm} from '../../redux/actions';\nimport {listEditSelector, shouldBeOneListSelector} from '../../redux/selectors';\n\nconst ListHead = ({listEdit, shouldBeOneList, addNewListConfirm, deleteCurrentListConfirm}) => {\n    return (\n        <div className={styles.list}>\n            <ButtonPrimary buttonClick={addNewListConfirm} name=\"Add new list\" disable={listEdit}/>\n            <ButtonPrimary buttonClick={deleteCurrentListConfirm} name=\"Delete list\" disable={shouldBeOneList}/>\n        </div>\n    );\n};\n\nListHead.propTypes = {\n    listEdit: PropTypes.bool,\n    addNewListConfirm: PropTypes.func,\n    deleteCurrentListConfirm: PropTypes.func,\n    shouldBeOneList: PropTypes.bool,\n};\n\nexport default connect(state => ({\n    listEdit: listEditSelector(state),\n    shouldBeOneList: shouldBeOneListSelector(state),\n}), {\n    addNewListConfirm,\n    deleteCurrentListConfirm,\n})(ListHead);\n","import React, {useEffect, useState} from 'react';\nimport styles from './TodoInput.module.scss'\nimport PropTypes from 'prop-types';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\nimport cn from 'classnames'\n\nconst TodoInput = ({fnApply, initialData, fnQuery, placeholder, maxLength = 150, onBlur = false, editMode = false}) => {\n    const [input, setInput] = useState('');\n    useEffect(() => {\n        if (initialData?.text) {\n            setInput(initialData.text);\n        } else if (typeof (initialData) === 'string') {\n            setInput(initialData);\n        }\n    }, []); //eslint-disable-line\n\n    const handleClick = () => {\n        if (input.length === 0) {\n            return\n        }\n        fnApply(input, initialData);\n        setInput('');\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            handleClick()\n        } else if (e.key === 'Escape') {\n            fnQuery(null);\n        }\n    };\n\n    const handleBlur = () => {\n        if (initialData) {\n            return handleClick()\n        }\n        fnQuery(null)\n    };\n\n    return (\n        <div className={styles.todoInput}>\n            <input\n                placeholder={placeholder}\n                autoFocus\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={(e) => handleKeyDown(e)}\n                className={cn(styles.input, {[styles.editMode]: editMode})}\n                maxLength={maxLength}\n                onBlur={() => (onBlur && handleBlur())}/>\n            <span\n                onMouseDown={() => handleClick()}\n            >\n                {initialData ? <EditIcon/> : <PostAddIcon/>}\n            </span>\n        </div>\n    );\n};\n\nTodoInput.propTypes = {\n    fnApply: PropTypes.func.isRequired,\n    initialData: PropTypes.any,\n    fnQuery: PropTypes.func.isRequired,\n    placeholder: PropTypes.string,\n    maxLength: PropTypes.number,\n    onBlur: PropTypes.bool,\n    editMode: PropTypes.bool,\n};\n\nexport default TodoInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SelectList.module.scss'\nimport {connect} from 'react-redux';\nimport {currentListSelector, todoListToArrSelector} from '../../redux/selectors';\nimport {setCurrentList} from '../../redux/actions';\n\nconst SelectList = ({currentList, setCurrentList, todoListArr}) => {\n    const handleChangeList = (e) => {\n        setCurrentList(e.target.value);\n    };\n    return (\n        <div>\n            <select className={styles.listSelect}\n                    onChange={(e) => handleChangeList(e)}\n                    value={currentList}>\n                {todoListArr.map((list, i) => (\n                    <option key={i} value={list}>{list}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nSelectList.propTypes = {\n    currentList: PropTypes.string,\n    setCurrentList: PropTypes.func,\n    todoListArr: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default connect(state => ({\n    currentList: currentListSelector(state),\n    todoListArr: todoListToArrSelector(state),\n}), {\n    setCurrentList,\n})(SelectList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoInput from '../TodoInput';\nimport styles from './Lists.module.scss'\nimport SelectList from '../SelectList/SelectList';\nimport CreateIcon from '@material-ui/icons/Create';\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport {connect} from 'react-redux';\nimport {currentListSelector, listEditSelector, newListNameSelector} from '../../redux/selectors';\nimport {addNewListConfirm, addNewListSuccess, clearList, renameListConfirm} from '../../redux/actions';\n\nconst Lists = ({listEdit, addNewListConfirm, addNewListSuccess, newListName, renameListConfirm, currentList, clearList}) => {\n    return (\n        <>\n            <div className=\"bold\">Select list:</div>\n            {listEdit\n                ? <TodoInput fnQuery={addNewListConfirm}\n                             fnApply={addNewListSuccess}\n                             maxLength={35}\n                             editMode={true}\n                             onBlur={true}\n                             initialData={newListName}/>\n                : <div className={styles.lists}>\n                    <SelectList/>\n                    <div className={styles.buttons}>\n                        <CreateIcon onClick={() => renameListConfirm(currentList)} titleAccess=\"Rename list\"/>\n                        <ClearAllIcon onClick={() => clearList()} titleAccess=\"Clear list\"/>\n                    </div>\n                </div>\n            }\n        </>\n    );\n};\n\nLists.propTypes = {\n    listEdit: PropTypes.bool,\n    addNewListConfirm: PropTypes.func,\n    addNewListSuccess: PropTypes.func,\n    newListName: PropTypes.string,\n    renameListConfirm: PropTypes.func,\n    currentList: PropTypes.string,\n};\n\nexport default connect(state => ({\n    listEdit: listEditSelector(state),\n    newListName: newListNameSelector(state),\n    currentList: currentListSelector(state),\n}), {\n    addNewListConfirm,\n    addNewListSuccess,\n    renameListConfirm,\n    clearList,\n})(Lists);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ListsMenu.module.scss'\nimport {\n    clearList,\n    deleteCurrentList,\n    deleteCurrentListConfirm,\n} from '../../redux/actions';\nimport {connect} from 'react-redux';\nimport {\n    confirmClearListSelector,\n    currentListSelector, deleteListSelector,\n} from '../../redux/selectors';\nimport ConfirmAction from '../ConfirmAction';\nimport ListHead from '../ListHead';\nimport Lists from '../Lists';\n\nconst ListsMenu = ({currentList, clearList, deleteCurrentListConfirm, confirmClearList, deleteList, deleteCurrentList}) => {\n    return (\n        <div className={styles.head}>\n            <ListHead/>\n            <Lists/>\n            {deleteList &&\n            <ConfirmAction\n                positiveFn={deleteCurrentList}\n                negativeFn={deleteCurrentListConfirm}\n                head={`Want to delete all list \"${currentList}\"?`}\n            />}\n            {confirmClearList &&\n            <ConfirmAction\n                positiveFn={clearList}\n                positive={'confirm'}\n                head={'Want to clear all list?'}\n            />}\n        </div>\n    );\n};\n\nListsMenu.propTypes = {\n    currentList: PropTypes.string,\n    clearList: PropTypes.func,\n    deleteCurrentListConfirm: PropTypes.func,\n    confirmClearList: PropTypes.bool,\n    deleteList: PropTypes.string,\n    deleteCurrentList: PropTypes.func,\n};\n\nexport default connect(state => ({\n    currentList: currentListSelector(state),\n    confirmClearList: confirmClearListSelector(state),\n    deleteList: deleteListSelector(state),\n}), {\n    deleteCurrentListConfirm,\n    deleteCurrentList,\n    clearList,\n})(ListsMenu);\n","import React from 'react';\nimport styles from './TodoItem.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {addTodo, confirmDelete, deleteTodo, setChecked, setEditMode} from '../../redux/actions';\nimport CreateIcon from '@material-ui/icons/Create';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TodoInput from '../TodoInput';\nimport {confirmDeleteModSelector, editModeSelector, idTodoItemSelector} from '../../redux/selectors';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport cn from 'classnames'\nimport ConfirmAction from '../ConfirmAction';\n\nconst TodoItem = ({id, text, checked, index, deleteTodo, editMode, setEditMode, setChecked, confirmId, confirmDelete, addTodo, task}) => {\n    const setEditNoChecked = (id) => {\n        if (!checked) setEditMode(id)\n    };\n    return (\n        <div className={styles.root}>\n            {editMode === id?\n                <TodoInput fnQuery={setEditMode} fnApply={addTodo} initialData={task} onBlur={true} editMode={true}/>\n                : <div className={styles.todoItem}>\n                    <span className={styles.todoText}\n                          onDoubleClick={() => setEditNoChecked(id)}>\n                        {checked ?\n                            <CheckCircleOutlineIcon onClick={() => setChecked(id)}/>\n                            : <RadioButtonUncheckedIcon onClick={() => setChecked(id)}/>}\n                        <span className={cn({[styles.checked]: checked})}>{index + 1}) {text}</span>\n                    </span>\n                    <div className={styles.edit}>\n                        <CreateIcon titleAccess=\"Edit task\"\n                            onClick={() => setEditNoChecked(id)}/>\n                        <CloseIcon titleAccess=\"Delete task\"\n                            onClick={() => confirmDelete(id)}/>\n                        {confirmId === id &&\n                        <ConfirmAction\n                            positiveFn={deleteTodo}\n                            negativeFn={confirmDelete}\n                            positive={id}\n                            negative={null}\n                            head={'Want to delete this task?'}/>\n                        }\n                    </div>\n                </div>\n            }\n        </div>\n    );\n};\n\nTodoItem.propTypes = {\n    id: PropTypes.string,\n    text: PropTypes.string,\n    index: PropTypes.number,\n    deleteTodo: PropTypes.func.isRequired,\n    editMode: PropTypes.string,\n    setEditMode: PropTypes.func,\n    setChecked: PropTypes.func,\n    confirmId: PropTypes.string,\n    confirmDelete: PropTypes.func,\n};\n\nexport default connect((state) => ({\n    editMode: editModeSelector(state),\n    confirmId: confirmDeleteModSelector(state),\n    task: idTodoItemSelector(state),\n}), {\n    deleteTodo,\n    setEditMode,\n    setChecked,\n    confirmDelete,\n    addTodo,\n})(TodoItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './LayoutList.module.scss'\nimport TodoItem from '../TodoItem/TodoItem';\nimport {connect} from 'react-redux';\nimport {todoListLengthSelector, todoListNameSelector, todoListSelector} from '../../redux/selectors';\n\nconst LayoutList = ({numTodo, todoListName}) => {\n    return (\n        <div>\n            {numTodo === 0 ?\n                <span className={styles.empty}>Empty, add task</span>\n                : todoListName.map((item, index) => (\n                    <TodoItem\n                        key={item.id}\n                        id={item.id}\n                        text={item.text}\n                        checked={item.checked}\n                        index={index}/>\n                ))}\n        </div>\n    )\n};\n\nLayoutList.propTypes = {\n    numTodo: PropTypes.number,\n    todoListName: PropTypes.array.isRequired,\n};\n\nexport default connect(state => ({\n    todoList: todoListSelector(state),\n    numTodo: todoListLengthSelector(state),\n    todoListName: todoListNameSelector(state),\n}))(LayoutList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './PopUp.module.scss';\nimport cn from 'classnames';\nimport HistoryIcon from '@material-ui/icons/History';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst PopUp = ({message, viewProp, func, icon}) => {\n    return (\n        <span onClick={() => func()}\n              className={cn(styles.revert, {[styles.view]: viewProp})}\n        >\n            <span>{message}</span>\n            {icon ? <HistoryIcon/> : <CloseIcon/>}\n        </span>\n    );\n};\n\nPopUp.propTypes = {\n    message: PropTypes.string,\n    viewProp: PropTypes.any,\n    func: PropTypes.func,\n    icon: PropTypes.string,\n};\n\nexport default PopUp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './FieldNewTask.module.scss'\nimport TodoInput from '../TodoInput';\nimport {connect} from 'react-redux';\nimport {addTodo, setEditMode} from '../../redux/actions';\n\nconst FieldNewTask = ({setEditMode, addTodo}) => {\n    return (\n        <div className={styles.gap}>\n            <div className=\"bold\">Add new task:</div>\n            <TodoInput fnQuery={setEditMode} fnApply={addTodo} placeholder=\"what do you need to do?\"/>\n        </div>\n    );\n};\n\nFieldNewTask.propTypes = {\n    setEditMode: PropTypes.func,\n    addTodo: PropTypes.func,\n};\n\nexport default connect(null, {\n    setEditMode,\n    addTodo,\n})(FieldNewTask);\n","import React, {useEffect} from 'react';\nimport styles from './TodoList.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {\n    currentListSelector,\n    lastDeletedSelector,\n    shouldBeOneListSelector,\n    todoListSelector\n} from '../../redux/selectors';\nimport {\n    addTodosInLocalStorage,\n    loadTodosFromLocalStorage,\n    revertDeleted,\n    setShouldBeOne\n} from '../../redux/actions';\nimport Header from '../Header';\nimport ListsMenu from '../ListsMenu';\nimport LayoutList from '../LayoutList';\nimport PopUp from '../PopUp';\nimport FieldNewTask from '../FieldNewTask';\n// import './todoList.css';\n\nconst TodoList = ({todoList, currentList, loadTodosFromLocalStorage, addTodosInLocalStorage, lastDeleted, revertDeleted, shouldBeOneList, setShouldBeOne}) => {\n    useEffect(() => {\n        loadTodosFromLocalStorage();\n    }, []); //eslint-disable-line\n\n    useEffect(() => {\n        addTodosInLocalStorage(todoList, currentList);\n    }, [addTodosInLocalStorage, todoList, currentList]);\n\n    return (\n        <div className={styles.root}>\n            <Header/>\n            <ListsMenu/>\n            <LayoutList/>\n            <FieldNewTask/>\n            <PopUp message=\"revert back\"\n                   viewProp={lastDeleted}\n                   func={revertDeleted}\n                   icon=\"history\"/>\n            <PopUp message=\"You have 1 list left, no deletion\"\n                   viewProp={shouldBeOneList}\n                   func={setShouldBeOne}/>\n        </div>\n    );\n};\n\nTodoList.propTypes = {\n    todoList: PropTypes.objectOf(PropTypes.array).isRequired,\n    currentList: PropTypes.string.isRequired,\n    loadTodosFromLocalStorage: PropTypes.func,\n    addTodosInLocalStorage: PropTypes.func,\n    lastDeleted: PropTypes.shape({\n        id: PropTypes.string,\n        text: PropTypes.string,\n        checked: PropTypes.bool,\n    }),\n    revertDeleted: PropTypes.func,\n    shouldBeOneList: PropTypes.bool,\n    setShouldBeOne: PropTypes.func,\n};\n\nexport default connect((state) => ({\n    todoList: todoListSelector(state),\n    currentList: currentListSelector(state),\n    lastDeleted: lastDeletedSelector(state),\n    shouldBeOneList: shouldBeOneListSelector(state),\n}), {\n    loadTodosFromLocalStorage,\n    addTodosInLocalStorage,\n    revertDeleted,\n    setShouldBeOne,\n})(TodoList);\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: error})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <h1 style={{color: 'white'}}>{this.state.error.message}</h1>;\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <TodoList/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import {\n    ADD_NEW_LIST,\n    ADD_TODO, CLEAR_LIST, CLEAR_LAST_DELETED, CONFIRM,\n    CONFIRM_DELETE, DELETE_CURRENT_LIST,\n    DELETE_TODO,\n    EDIT_MODE,\n    EDIT_TODO,\n    LOAD_TODOS_FROM_LOCALSTORAGE, REVERT_DELETED,\n    SET_CHECKED, SET_CURRENT_LIST, SUCCESS, SHOULD_BE_ONE_LIST, RENAME_LIST\n} from '../constants';\nimport {deleteKeyInObj, renameKeyInObj} from '../utils';\n\nconst initialState = {\n    todoList: {\n        Default: [],\n    },\n    editMode: null,\n    confirmDeleteId: null,\n    lastDeleted: null,\n    confirmClearList: false,\n    currentList: 'Default',\n    listEdit: false,\n    newListName: '',\n    deleteList: '',\n    shouldBeOneList: false,\n};\n\n// todo посмотреть как бы разбить 2 или несколько редьюсеров, а то какой-то здоровый :\\\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action;\n    switch (type) {\n        case ADD_TODO:\n            return {\n                ...state,\n                todoList: {\n                    ...state.todoList,\n                    [state.currentList]: [...state.todoList[state.currentList], payload.newTodo]\n                }\n            };\n        case DELETE_TODO:\n            return {\n                ...state,\n                todoList: {\n                    ...state.todoList,\n                    [state.currentList]: state.todoList[state.currentList].filter(item => (item.id !== payload.id))\n                },\n                lastDeleted: state.todoList[state.currentList].find(item => {\n                    if (item.id === payload.id) {\n                        return item\n                    }\n                    return null\n                }),\n                confirmDeleteId: null\n            };\n        case EDIT_MODE:\n            return {\n                ...state,\n                editMode: payload.id,\n            };\n        case EDIT_TODO:\n            return {\n                ...state,\n                todoList: {\n                    ...state.todoList,\n                    [state.currentList]: state.todoList[state.currentList].map(item => {\n                        if (item.id === payload.task.id) {\n                            return {...item, text: payload.upperText}\n                        }\n                        return item\n                    })\n                },\n                editMode: null,\n            };\n        case LOAD_TODOS_FROM_LOCALSTORAGE: {\n            return {\n                ...state,\n                todoList: payload.reformatTodoList,\n                currentList: payload.localStorageCurrentList,\n            }\n        }\n        case SET_CHECKED:\n            return {\n                ...state,\n                todoList: {\n                    ...state.todoList,\n                    [state.currentList]: state.todoList[state.currentList].map(item => {\n                        if (item.id === payload.id) {\n                            return {...item, checked: !item.checked}\n                        }\n                        return item\n                    })\n                }\n            };\n        case CONFIRM_DELETE:\n            return {\n                ...state,\n                confirmDeleteId: payload.id\n            };\n        case CLEAR_LAST_DELETED:\n            return {\n                ...state,\n                lastDeleted: null\n            };\n        case REVERT_DELETED:\n            return {\n                ...state,\n                todoList: {\n                    ...state.todoList,\n                    [state.currentList]: [...state.todoList[state.currentList], state.lastDeleted]\n                },\n                lastDeleted: null\n            };\n        case CLEAR_LIST + CONFIRM:\n            return {\n                ...state,\n                confirmClearList: !state.confirmClearList\n            };\n        case CLEAR_LIST + SUCCESS:\n            return {\n                ...state,\n                todoList: {...state.todoList, [state.currentList]: []},\n                lastDeleted: null,\n                confirmClearList: false\n            };\n        case SET_CURRENT_LIST:\n            return {\n                ...state,\n                currentList: payload.currentList,\n            };\n        case ADD_NEW_LIST + CONFIRM:\n            return {\n                ...state,\n                listEdit: !state.listEdit,\n                newListName: payload.renameListName || '',\n            };\n        case ADD_NEW_LIST + SUCCESS:\n            return {\n                ...state,\n                todoList: {\n                    ...state.todoList,\n                    [payload.upperText]: [],\n                },\n                listEdit: false,\n                newListName: '',\n                currentList: payload.upperText,\n            };\n        case RENAME_LIST + CONFIRM:\n            return {\n                ...state,\n                listEdit: true,\n                newListName: payload.currentList,\n            };\n        case RENAME_LIST + SUCCESS:\n            return {\n                ...state,\n                todoList: renameKeyInObj(state.newListName, payload.upperText, state.todoList),\n                listEdit: false,\n                currentList: payload.upperText,\n                newListName: '',\n            };\n        case DELETE_CURRENT_LIST + CONFIRM:\n            return {\n                ...state,\n                deleteList: !state.deleteList && state.currentList\n            };\n        case DELETE_CURRENT_LIST + SUCCESS:\n            return {\n                ...state,\n                todoList: deleteKeyInObj([state.deleteList], state.todoList),\n                currentList: payload.newList,\n                deleteList: '',\n            };\n        case SHOULD_BE_ONE_LIST:\n            return {\n                ...state,\n                deleteList: '',\n                shouldBeOneList: !state.shouldBeOneList,\n            };\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux';\nimport todo from './todo';\n\nexport default combineReducers({\n    todo,\n});\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from './reducers';\r\n\r\nconst enhancer = applyMiddleware(\r\n  thunk,\r\n);\r\n\r\nexport default createStore(reducers, composeWithDevTools(enhancer));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}